1. How to turn text article to markdown, suitable for jekyll?

To turn plain text to a markdown syntax, suitable for our project and following our conventions you must simply follow few basic rules: 

	1. Manage new lines strategically (`<br>` tags can help here too)
	2. Write links as `[link text](https://link-url.com/)`
	3. Write headings with `#` signs - `### Subtitle` or `## Title` e.g.
	4. Escape code with ```.
	5. Markdown can contain HTML directly. Use HTML spans with style property to colorize and decorate text, when needed - it can be more reliable than markdown, and is more flexible.

To turn markdown files jekyll suitable for our project, you must add the jekyll front matter. It is a text that we add at the beginning of each markdown file. It shall look like this:

	```
	---
	layout: page
	title: Radiowatch - FAQ
	permalink: /listiary/radiowatch/faq/
	exclude: true
	---
	```



2. Build Jekyll documentation

	Go to the folder containing the jekyll dir - "\DescribeCompiler.jekyll",
	Adjust values in "_config.yml" if needed,
	
	Copy the prepared markdown files/directories to the "content" subfolder,
	Copy the index to the main folder as well, making sure that the permalink on that version is commented - "# permalink:",
	
	In cmd, cd to the jekyll dir - "\DescribeCompiler.jekyll",
	Run "bundle install",
	Run "bundle exec jekyll -v" if you want to test,
	Run "bundle exec jekyll clean",
	Run "bundle install",
	Run "bundle exec jekyll serve",
	
	Check result on localhost - "http://127.0.0.1:4000/",
	Ctrl+V then Y then Y to stop server later;


	// See
	Check if ruby installed: 									ruby -v
	Check if Jekyll installed: 									jekyll -v
	Install Jekyll:												gem update --system
																gem install jekyll bundler
																jekyll -v

	// Commands
	jekyll new @website --force
	cd @website
	bundle exec jekyll serve
	bundle exec jekyll serve --draft

	// Jekyll folder
	gem environment
	C:\Ruby32-x64\lib\ruby\gems\3.2.0\gems
	C:\Ruby32-x64\lib\ruby\gems\3.2.0\gems\jekyll-4.3.3\lib

	// Ready sites
	C:\Users\Viktor Chernev\Desktop\World-Describe\Website\WorldInLists-Documentation\ver_blog



3. Get the HTML version

	The "\DescribeCompiler.jekyll\_site" folder contains the HTML version of the website after serving it in the previous step.
	We simply copy all the contents to "\DescribeCompiler.html", after deleting the contents of the folder.
	That is our host-able site. We can go ahead and use FileZilla to upload it, but keep in mind that it won't work properly as a `file://` on a local host, without being served.



4. Modify the minima theme

	We will not need to do this every time, but I include it, just in case something goes wrong.

	We are applying a few small modifications to the installed minima theme before we use it, and we are doing that by copying some of the sub-folders of the theme to our jekyll folder, so that they might take precedence for our project but not affect other projects, and also, we don't loose the changes when we update the minima theme.
	
	A) In the main CSS file, the first media query says - `@media screen and (max-width: 600px) {` - we want to remove the second part and leave it as `@media screen {`.
	This is the query that makes the navbar into a hamburger button, and by modifying it like that, we make sure it remains a hamburger button for any screen sizes, not only on mobile devices. To do that, we find our installation of the minima theme - which is just a ruby gem, residing in `C:\Ruby32-x64\lib\ruby\gems\3.2.0\gems`, copy the `_sass` folder to our project, open the "_layout.scss" file and replace `@include media-query($on-palm)` with `@media screen`. We copy the folder to our project so that this version is always loaded from here.
	
	B) We do some modification to the ruby logic in `_includes/header.html`. 
	The example below shows that we are using the custom front matter variable `exclude` to exclude any pages where it is set to true.
	We also manually added the links we want included in the nav-bar.
	It looks like this:
	
	```
	<div class="trigger">
		<a class="page-link" href="/language/how-to-write/">Language Home</a>
		<a class="page-link" href="/language/how-to-compile/">Compiler Home</a>
		<a class="page-link" href="/language/reference/">Tech Reference</a>
		<a class="page-link" href="/language/">About Describe</a>
		<a class="page-link" href="/listiary/">About Listiary</a>
		<a class="page-link" href="https://library.listiary.com/">Describe Library</a>
		<a class="page-link" href="/language/site-map/">Site Map</a>
	  {%- for path in page_paths -%}
		{%- assign my_page = site.pages | where: "path", path | first -%}
		{%- if my_page and my_page.exclude != true -%}
		  {%- if my_page.title -%}
			<a class="page-link" href="{{ my_page.url | relative_url }}">{{ my_page.title | escape }}</a>
		  {%- endif -%}
		{%- endif -%}
	  {%- endfor -%}
    </div>
	```